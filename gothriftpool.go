package gothriftpool

import (
	"bytes"
	"github.com/koofr/gointerfacer"
	"go/format"
	"text/template"
)

const proxyTemplate = `// Autogenerated by gothriftpool generator
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package {{.ProxyPackage}}

import (
	"fmt"
	"github.com/koofr/go-resourcepool"
	"{{.InterfaceImport}}"
)

type ClientFactory func() (*{{.ClientType}}, error)

func isThriftTransportException(err error) bool {
	return fmt.Sprintf("%T", err) == "*thrift.tTransportException"
}

type resource struct {
	client *{{.ClientType}}
	closed bool
}

func (r *resource) Close() {
	r.closed = true
	r.client.Transport.Close()
}

func (r *resource) IsClosed() bool {
	return r.closed
}

type Proxy struct {
	clientFactory ClientFactory
	pool          *resourcepool.ResourcePool
}

func New(clientFactory ClientFactory, idleCapacity int, maxResources int) *Proxy {
	p := &Proxy{
		clientFactory: clientFactory,
	}

	p.pool = resourcepool.NewResourcePool(p.createResource, idleCapacity, maxResources)

	return p
}

func (p *Proxy) Close() {
	p.pool.Close()
}

func (p *Proxy) createResource() (r resourcepool.Resource, err error) {
	client, err := p.clientFactory()

	if err != nil {
		return
	}

	r = &resource{client, false}

	return
}

{{range .Functions}}
func (p *Proxy) {{.Name}}({{range .Params}}{{.Name}} {{.Type}}, {{end}})({{range .Res}}{{.Name}} {{.Type}}, {{end}}){
	var returnErr error

	for i := 0; i < 2; i++ {
		poolResource, err := p.pool.Acquire()

		if err != nil {
			returnErr = err
			continue
		}

		client := poolResource.(*resource).client

		{{range $i, $e := .Res}}{{if $i}}, {{end}}{{.Name}}{{end}} = client.{{.Name}}({{range .Params}}{{.Name}}, {{end}})

		if isThriftTransportException(err) {
			poolResource.Close()

			p.pool.Empty()

			returnErr = err
			continue
		}

		return {{range $i, $e := .Res}}{{if $i}}, {{end}}{{.Name}}{{end}}
	}

	err = returnErr

	return
}
{{end}}
`

type Generator struct {
	InterfaceImport  string
	InterfacePackage string
	InterfaceName    string
	ProxyPackage     string
	Functions        []gointerfacer.Func
}

type ThriftInterface struct {
	InterfaceImport string
	ProxyPackage    string
	ClientType      string
	Functions       []gointerfacer.Func
}

func NewGenerator(iface string) (g *Generator, err error) {
	ifaceImport, ifacePkg, ifaceName, err := gointerfacer.FindInterface(iface)

	if err != nil {
		return nil, err
	}

	proxyPackage := ifacePkg + "proxy"

	functions, err := gointerfacer.Functions(iface)

	if err != nil {
		return nil, err
	}

	g = &Generator{
		InterfaceImport:  ifaceImport,
		InterfacePackage: ifacePkg,
		InterfaceName:    ifaceName,
		ProxyPackage:     proxyPackage,
		Functions:        functions,
	}

	return g, nil
}

func (g *Generator) render() (source []byte, err error) {
	ti := &ThriftInterface{
		InterfaceImport: g.InterfaceImport,
		ProxyPackage:    g.ProxyPackage,
		ClientType:      g.InterfacePackage + "." + g.InterfaceName + "Client",
		Functions:       g.Functions,
	}

	tmpl, err := template.New("tpl").Parse(proxyTemplate)

	if err != nil {
		return nil, err
	}

	buf := &bytes.Buffer{}

	err = tmpl.Execute(buf, ti)

	if err != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

func (g *Generator) format(source []byte) (code []byte, err error) {
	return format.Source(source)
}

func (g *Generator) Generate() (code []byte, err error) {
	source, err := g.render()

	if err != nil {
		return nil, err
	}

	code, err = g.format(source)

	if err != nil {
		return nil, err
	}

	return code, nil
}
