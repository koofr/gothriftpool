package gothriftpooltest

import (
	"github.com/koofr/gothriftpool"
	"testing"
)

const testGeneratorExpected = `// Autogenerated by gothriftpool generator
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package myserviceproxy

import (
	"fmt"
	"github.com/koofr/go-resourcepool"
	"myservice"
)

type ClientFactory func() (*myservice.MyServiceClient, error)

func isThriftTransportException(err error) bool {
	return fmt.Sprintf("%T", err) == "*thrift.tTransportException"
}

type resource struct {
	client *myservice.MyServiceClient
	closed bool
}

func (r *resource) Close() {
	r.closed = true
	r.client.Transport.Close()
}

func (r *resource) IsClosed() bool {
	return r.closed
}

type Proxy struct {
	clientFactory ClientFactory
	pool          *resourcepool.ResourcePool
}

func New(clientFactory ClientFactory, idleCapacity int, maxResources int) *Proxy {
	p := &Proxy{
		clientFactory: clientFactory,
	}

	p.pool = resourcepool.NewResourcePool(p.createResource, idleCapacity, maxResources)

	return p
}

func (p *Proxy) Close() {
	p.pool.Close()
}

func (p *Proxy) createResource() (r resourcepool.Resource, err error) {
	client, err := p.clientFactory()

	if err != nil {
		return
	}

	r = &resource{client, false}

	return
}

func (p *Proxy) GetResult(id myservice.UUID, req *myservice.MyRequest) (r *myservice.MyResult, me *myservice.MyException, err error) {
	var returnErr error

	for i := 0; i < 2; i++ {
		poolResource, err := p.pool.Acquire()

		if err != nil {
			returnErr = err
			continue
		}

		client := poolResource.(*resource).client

		r, me, err = client.GetResult(id, req)

		if isThriftTransportException(err) {
			poolResource.Close()

			p.pool.Empty()

			returnErr = err
			continue
		}

		return r, me, err
	}

	err = returnErr

	return
}
`

func TestGenerator(t *testing.T) {
	iface := "myservice.MyService"

	generator, err := gothriftpool.NewGenerator(iface)

	if err != nil {
		t.Error(err)
	}

	code, err := generator.Generate()

	if err != nil {
		t.Error(err)
	}

	if string(code) != testGeneratorExpected {
		t.Error("Generated code doesn't not match expected.")
	}
}
